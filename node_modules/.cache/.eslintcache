[{"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\index.tsx":"1","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\App.tsx":"3","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\Header.tsx":"4","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\Icons.tsx":"5","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\Home.tsx":"6","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\questionsData.ts":"7","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\QuestionList.tsx":"8","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\Question.tsx":"9","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\Page.tsx":"10","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\PageTitle.tsx":"11","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\AskPage.tsx":"12","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\SearchPage.tsx":"13","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\SignInPage.tsx":"14","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\NotFoundPage.tsx":"15","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\QuestionPage.tsx":"16","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\AnswerList.tsx":"17","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\Answer.tsx":"18","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\Store.ts":"19"},{"size":564,"mtime":1672737221923,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":1672220741348,"results":"22","hashOfConfig":"21"},{"size":1564,"mtime":1674642570434,"results":"23","hashOfConfig":"21"},{"size":1375,"mtime":1674548638768,"results":"24","hashOfConfig":"21"},{"size":100,"mtime":1672223148549,"results":"25","hashOfConfig":"21"},{"size":1929,"mtime":1674643795632,"results":"26","hashOfConfig":"21"},{"size":3322,"mtime":1674551372693,"results":"27","hashOfConfig":"21"},{"size":603,"mtime":1673083237498,"results":"28","hashOfConfig":"21"},{"size":943,"mtime":1673081223448,"results":"29","hashOfConfig":"21"},{"size":300,"mtime":1672738055305,"results":"30","hashOfConfig":"21"},{"size":156,"mtime":1672737890233,"results":"31","hashOfConfig":"21"},{"size":4033,"mtime":1674550303191,"results":"32","hashOfConfig":"21"},{"size":936,"mtime":1674548914362,"results":"33","hashOfConfig":"21"},{"size":121,"mtime":1672738513813,"results":"34","hashOfConfig":"21"},{"size":220,"mtime":1672904453373,"results":"35","hashOfConfig":"21"},{"size":4241,"mtime":1674551654362,"results":"36","hashOfConfig":"21"},{"size":512,"mtime":1674551749174,"results":"37","hashOfConfig":"21"},{"size":458,"mtime":1674469755761,"results":"38","hashOfConfig":"21"},{"size":3984,"mtime":1674642504119,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"9hryfo",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\index.tsx",[],[],[],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\reportWebVitals.ts",[],[],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\App.tsx",[],[],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\Header.tsx",[],[],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\Icons.tsx",[],[],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\Home.tsx",["101","102"],["103"],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\questionsData.ts",["104"],[],"import { wait } from \"@testing-library/user-event/dist/utils\";\r\n\r\nexport interface QuestionData {\r\n    Id: number;\r\n    title: string;\r\n    content: string;\r\n    userName: string;\r\n    created: Date;\r\n    answers: AnswerData[];\r\n}\r\n\r\nexport interface AnswerData {\r\n    answerId: number;\r\n    content: string;\r\n    userName: string;\r\n    created: Date;\r\n}\r\n\r\nconst questions: QuestionData[] = [\r\n    {\r\n        Id: 1,\r\n        title: \"Why should I learn TypeScript?\",\r\n        content:\r\n            \"TypeScript seems to be getting popular so I wondered whether it is worth my time learning it? What benefits does it give over JavaScript?\",\r\n        userName: \"Bob\",\r\n        created: new Date(),\r\n        answers: [\r\n            {\r\n                answerId: 1,\r\n                content:\r\n                    \"To catch problems earlier speeding up your developments\",\r\n                userName: \"Jane\",\r\n                created: new Date(),\r\n            },\r\n            {\r\n                answerId: 2,\r\n                content:\r\n                    \"So, that you can use the JavaScript features of tomorrow, today\",\r\n                userName: \"Fred\",\r\n                created: new Date(),\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        Id: 2,\r\n        title: \"Which state management tool should I use?\",\r\n        content:\r\n            \"There seem to be a fair few state management tools around for React - React, Unstated, ... Which one should I use?\",\r\n        userName: \"Bob\",\r\n        created: new Date(),\r\n        answers: [],\r\n    },\r\n];\r\n\r\nexport const getUnansweredQuestions = async (): Promise<QuestionData[]> => {\r\n    await wait(200);\r\n    return questions.filter((q) => q.answers.length === 0);\r\n};\r\n\r\nexport const getQuestion = async (Id: number): Promise<QuestionData | null> => {\r\n    const result = questions.filter((q) => q.Id == Id);\r\n    return result.length === 0 ? null : result[0];\r\n};\r\n\r\nexport const getAllQuestions = async (): Promise<QuestionData[]> => {\r\n    await wait(200);\r\n    return questions;\r\n};\r\n\r\nexport const searchQuestions = async (\r\n    critiria: string\r\n): Promise<QuestionData[]> => {\r\n    await wait(300);\r\n    return questions.filter(\r\n        (q) =>\r\n            q.title.toLowerCase().indexOf(critiria.toLowerCase()) >= 0 ||\r\n            q.content.toLowerCase().indexOf(critiria.toLowerCase()) >= 0\r\n    );\r\n};\r\n\r\nexport interface PostQuestionData {\r\n    title: string;\r\n    content: string;\r\n    created: Date;\r\n    userName: string;\r\n}\r\n\r\nexport const postQuestion = async (\r\n    question: PostQuestionData\r\n): Promise<QuestionData | undefined> => {\r\n    await wait(200);\r\n    const Id = Math.max(...questions.map((q) => q.Id)) + 1;\r\n    const newQuestion: QuestionData = {\r\n        ...question,\r\n        Id,\r\n        answers: [],\r\n    };\r\n    questions.push(newQuestion);\r\n    return newQuestion;\r\n};\r\n\r\nexport interface PostAnswerData {\r\n    Id: number;\r\n    content: string;\r\n    userName: string;\r\n    created: Date;\r\n}\r\n\r\nexport const postAnswer = async (\r\n    answer: PostAnswerData\r\n): Promise<AnswerData | undefined> => {\r\n    await wait(500);\r\n    const question = questions.filter((q) => q.Id === answer.Id)[0];\r\n    question.answers.push({\r\n        answerId: 99,\r\n        ...answer,\r\n    });\r\n    return {\r\n        answerId: 99,\r\n        ...answer,\r\n    };\r\n};\r\n","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\QuestionList.tsx",[],[],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\Question.tsx",[],[],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\Page.tsx",[],[],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\PageTitle.tsx",[],[],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\AskPage.tsx",["105"],[],"import { Page } from \"./Page\";\r\nimport { useForm, useFormState } from \"react-hook-form\";\r\nimport { postQuestion } from \"./questionsData\";\r\nimport React from \"react\";\r\n\r\ntype FormData = {\r\n    title: string;\r\n    content: string;\r\n};\r\n\r\nexport const AskPage = () => {\r\n    const {\r\n        register,\r\n        formState: { errors },\r\n        handleSubmit,\r\n    } = useForm<FormData>();\r\n\r\n    const [successfull, setSuccessfull] = React.useState(false);\r\n\r\n    const onSubmit = async (data: FormData) => {\r\n        const res = await postQuestion({\r\n            title: data.title,\r\n            content: data.content,\r\n            created: new Date(),\r\n            userName: \"wissem\",\r\n        });\r\n        setSuccessfull(res ? true : false);\r\n    };\r\n\r\n    return (\r\n        <Page title=\"Ask a question\">\r\n            <div className=\"container d-flex justify-content-center\">\r\n                <div className=\"card\" style={{ width: \"50%\" }}>\r\n                    <div className=\"card-body \">\r\n                        <form onSubmit={handleSubmit(onSubmit)}>\r\n                            <h5 className=\"card-title\">Title</h5>\r\n                            <input\r\n                                type=\"text\"\r\n                                {...register(\"title\", {\r\n                                    required: true,\r\n                                })}\r\n                                className=\"form-control\"\r\n                                id=\"title\"\r\n                                name=\"title\"\r\n                                placeholder=\"enter the title\"\r\n                            />\r\n                            {errors.title &&\r\n                                errors.title.type === \"required\" && (\r\n                                    <p className=\"text-danger p-2 fs-6 fw-bold fst-italic opacity-75\">\r\n                                        this field is requiered\r\n                                    </p>\r\n                                )}\r\n                            <h5 className=\"card-title mt-4\">Content</h5>\r\n                            <div className=\"form-floating\">\r\n                                <textarea\r\n                                    {...register(\"content\", {\r\n                                        required: true,\r\n                                        minLength: 10,\r\n                                    })}\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Leave a comment here\"\r\n                                    style={{ height: \"70px\" }}\r\n                                ></textarea>\r\n                            </div>\r\n                            {errors.content?.type === \"required\" && (\r\n                                <p className=\"text-danger p-2 fs-6 fw-bold fst-italic opacity-75\">\r\n                                    this field is requiered\r\n                                </p>\r\n                            )}\r\n                            {errors.content?.type === \"minLength\" && (\r\n                                <p className=\"text-danger p-2 fs-6 fw-bold fst-italic opacity-75\">\r\n                                    10 characters are minimum in this field\r\n                                </p>\r\n                            )}\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn btn-success mt-4\"\r\n                                disabled={successfull}\r\n                            >\r\n                                Submit your question\r\n                            </button>\r\n                            {successfull && (\r\n                                <p className=\"text-success p-2 fs-6 fw-bold fst-italic opacity-75\">\r\n                                    form is submitted successfully :)\r\n                                </p>\r\n                            )}\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Page>\r\n    );\r\n};\r\n\r\nexport default AskPage;\r\n","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\SearchPage.tsx",[],[],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\SignInPage.tsx",[],[],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\NotFoundPage.tsx",[],[],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\QuestionPage.tsx",["106"],[],"import { Page } from \"./Page\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { QuestionData, getQuestion } from \"./questionsData\";\r\nimport { AnswersList } from \"./AnswerList\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { postAnswer } from \"./questionsData\";\r\n\r\ntype FormData = {\r\n    content: string;\r\n};\r\n\r\nexport const QuestionPage = () => {\r\n    const [question, setQuestion] = React.useState<QuestionData | null>(null);\r\n    const { Id } = useParams();\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm<FormData>();\r\n    const [successfull, setSuccessfull] = React.useState(false);\r\n\r\n    const onSubmit = async (data: FormData) => {\r\n        const res = await postAnswer({\r\n            Id: question!.Id,\r\n            content: data.content,\r\n            userName: \"wissem\",\r\n            created: new Date(),\r\n        });\r\n        setSuccessfull(res ? true : false);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        const doGetQuestion = async (Id: number) => {\r\n            const foundQuestion = await getQuestion(Id);\r\n            setQuestion(foundQuestion);\r\n        };\r\n        if (Id) {\r\n            doGetQuestion(Number(Id));\r\n        }\r\n    }, [Id]);\r\n\r\n    return (\r\n        <div className=\"card m-5\">\r\n            <div className=\"card-header\">\r\n                {question === null ? \"\" : question.userName}\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <blockquote className=\"blockquote mb-0\">\r\n                    <p className=\"fw-bold ms-4 fs-3\">\r\n                        {question === null ? \"\" : question.title}\r\n                    </p>\r\n                    <p className=\"ms-4 text-dark\">\r\n                        {question === null ? \"\" : question.content}\r\n                    </p>\r\n                    <footer className=\"blockquote-footer fs-6 ms-4 fw-lighter fst-italic\">\r\n                        {`on ${question?.created.toLocaleDateString()} ${question?.created.toLocaleTimeString()}`}\r\n                    </footer>\r\n                    <AnswersList\r\n                        data={question === null ? undefined : question.answers}\r\n                    />\r\n                    <div className=\"container\">\r\n                        <form onSubmit={handleSubmit(onSubmit)}>\r\n                            <h4 className=\"text-secondary d-flex justify-content-center m-4\">\r\n                                Your Answer\r\n                            </h4>\r\n                            <div className=\"form-floating\">\r\n                                <textarea\r\n                                    {...register(\"content\", {\r\n                                        minLength: 55,\r\n                                    })}\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Leave a comment here\"\r\n                                    id=\"floatingTextarea2\"\r\n                                    style={{ height: \"100px\" }}\r\n                                ></textarea>\r\n                            </div>\r\n                            {errors.content?.type === \"minLength\" && (\r\n                                <p className=\"text-danger p-2 fs-6 fw-bold fst-italic opacity-75\">\r\n                                    this field requieres 50 characters as\r\n                                    minimum length\r\n                                </p>\r\n                            )}\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn btn-success mt-4\"\r\n                                disabled={successfull}\r\n                            >\r\n                                Submit your asnwer\r\n                            </button>\r\n                            {successfull && (\r\n                                <p className=\"text-success p-2 fs-6 fw-bold fst-italic opacity-75\">\r\n                                    your answer has been submitted successfully\r\n                                </p>\r\n                            )}\r\n                        </form>\r\n                    </div>\r\n                </blockquote>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\AnswerList.tsx",[],[],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\Answer.tsx",[],[],"C:\\Users\\wisse\\Asp.netReact_Training\\test1\\qAndA\\frontend\\src\\Store.ts",["107","108","109"],[],{"ruleId":"110","severity":1,"message":"111","line":4,"column":5,"nodeType":"112","messageId":"113","endLine":4,"endColumn":20},{"ruleId":"110","severity":1,"message":"114","line":6,"column":5,"nodeType":"112","messageId":"113","endLine":6,"endColumn":17},{"ruleId":"115","severity":1,"message":"116","line":36,"column":8,"nodeType":"117","endLine":36,"endColumn":10,"suggestions":"118","suppressions":"119"},{"ruleId":"120","severity":1,"message":"121","line":61,"column":49,"nodeType":"122","messageId":"123","endLine":61,"endColumn":51},{"ruleId":"110","severity":1,"message":"124","line":2,"column":19,"nodeType":"112","messageId":"113","endLine":2,"endColumn":31},{"ruleId":"110","severity":1,"message":"125","line":1,"column":10,"nodeType":"112","messageId":"113","endLine":1,"endColumn":14},{"ruleId":"110","severity":1,"message":"126","line":3,"column":10,"nodeType":"112","messageId":"113","endLine":3,"endColumn":30},{"ruleId":"110","severity":1,"message":"127","line":3,"column":32,"nodeType":"112","messageId":"113","endLine":3,"endColumn":43},{"ruleId":"110","severity":1,"message":"128","line":3,"column":45,"nodeType":"112","messageId":"113","endLine":3,"endColumn":56},"@typescript-eslint/no-unused-vars","'getAllQuestions' is defined but never used.","Identifier","unusedVar","'QuestionData' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["129"],["130"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useFormState' is defined but never used.","'Page' is defined but never used.","'TypedUseSelectorHook' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.",{"desc":"131","fix":"132"},{"kind":"133","justification":"134"},"Update the dependencies array to be: [dispatch]",{"range":"135","text":"136"},"directive","",[1177,1179],"[dispatch]"]