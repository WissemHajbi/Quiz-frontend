{"ast":null,"code":"import { wait } from \"@testing-library/user-event/dist/utils\";\nconst questions = [{\n  Id: 1,\n  title: \"Why should I learn TypeScript?\",\n  content: \"TypeScript seems to be getting popular so I wondered whether it is worth my time learning it? What benefits does it give over JavaScript?\",\n  userName: \"Bob\",\n  created: new Date(),\n  answers: [{\n    answerId: 1,\n    content: \"To catch problems earlier speeding up your developments\",\n    userName: \"Jane\",\n    created: new Date()\n  }, {\n    answerId: 2,\n    content: \"So, that you can use the JavaScript features of tomorrow, today\",\n    userName: \"Fred\",\n    created: new Date()\n  }]\n}, {\n  Id: 2,\n  title: \"Which state management tool should I use?\",\n  content: \"There seem to be a fair few state management tools around for React - React, Unstated, ... Which one should I use?\",\n  userName: \"Bob\",\n  created: new Date(),\n  answers: []\n}];\nexport const getUnansweredQuestions = async () => {\n  let unansweredQuestions = [];\n  const response = await fetch(\"http://localhost:5241/questions/unanswered\");\n  unansweredQuestions = await response.json();\n  return unansweredQuestions.map(question => ({\n    ...question,\n    created: new Date(question.created)\n  }));\n};\nexport const getQuestion = async Id => {\n  const response = await fetch(`http://localhost:5241/questions/${Id}`);\n  const question = await response.json();\n  console.log(\"aaaaaaaaaa\");\n  console.log(question);\n  return mapQuestionFromServer(question);\n};\nexport const getAllQuestions = async () => {\n  await wait(200);\n  return questions;\n};\nexport const searchQuestions = async critiria => {\n  await wait(300);\n  return questions.filter(q => q.title.toLowerCase().indexOf(critiria.toLowerCase()) >= 0 || q.content.toLowerCase().indexOf(critiria.toLowerCase()) >= 0);\n};\nexport const postQuestion = async question => {\n  await wait(200);\n  const Id = Math.max(...questions.map(q => q.Id)) + 1;\n  const newQuestion = {\n    ...question,\n    Id,\n    answers: []\n  };\n  questions.push(newQuestion);\n  return newQuestion;\n};\nexport const postAnswer = async answer => {\n  await wait(500);\n  const question = questions.filter(q => q.Id === answer.Id)[0];\n  question.answers.push({\n    answerId: 99,\n    ...answer\n  });\n  return {\n    answerId: 99,\n    ...answer\n  };\n};\nexport const mapQuestionFromServer = question => ({\n  ...question,\n  created: new Date(question.created),\n  answers: question.answers ? question.answers.map(answer => ({\n    ...answer,\n    created: new Date(answer.created)\n  })) : []\n});","map":{"version":3,"names":["wait","questions","Id","title","content","userName","created","Date","answers","answerId","getUnansweredQuestions","unansweredQuestions","response","fetch","json","map","question","getQuestion","console","log","mapQuestionFromServer","getAllQuestions","searchQuestions","critiria","filter","q","toLowerCase","indexOf","postQuestion","Math","max","newQuestion","push","postAnswer","answer"],"sources":["C:/Users/wisse/Asp.netReact_Training/test1/qAndA/frontend/src/questionsData.ts"],"sourcesContent":["import { wait } from \"@testing-library/user-event/dist/utils\";\r\n\r\nexport interface QuestionData {\r\n    Id: number;\r\n    title: string;\r\n    content: string;\r\n    userName: string;\r\n    created: Date;\r\n    answers: AnswerData[];\r\n}\r\n\r\nexport interface AnswerData {\r\n    answerId: number;\r\n    content: string;\r\n    userName: string;\r\n    created: Date;\r\n}\r\n\r\nconst questions: QuestionData[] = [\r\n    {\r\n        Id: 1,\r\n        title: \"Why should I learn TypeScript?\",\r\n        content:\r\n            \"TypeScript seems to be getting popular so I wondered whether it is worth my time learning it? What benefits does it give over JavaScript?\",\r\n        userName: \"Bob\",\r\n        created: new Date(),\r\n        answers: [\r\n            {\r\n                answerId: 1,\r\n                content:\r\n                    \"To catch problems earlier speeding up your developments\",\r\n                userName: \"Jane\",\r\n                created: new Date(),\r\n            },\r\n            {\r\n                answerId: 2,\r\n                content:\r\n                    \"So, that you can use the JavaScript features of tomorrow, today\",\r\n                userName: \"Fred\",\r\n                created: new Date(),\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        Id: 2,\r\n        title: \"Which state management tool should I use?\",\r\n        content:\r\n            \"There seem to be a fair few state management tools around for React - React, Unstated, ... Which one should I use?\",\r\n        userName: \"Bob\",\r\n        created: new Date(),\r\n        answers: [],\r\n    },\r\n];\r\n\r\nexport const getUnansweredQuestions = async (): Promise<QuestionData[]> => {\r\n    let unansweredQuestions: QuestionData[] = [];\r\n    const response = await fetch(\"http://localhost:5241/questions/unanswered\");\r\n    unansweredQuestions = await response.json();\r\n    return unansweredQuestions.map((question) => ({\r\n        ...question,\r\n        created: new Date(question.created),\r\n    }));\r\n};\r\n\r\nexport const getQuestion = async (Id: number): Promise<QuestionData | null> => {\r\n    const response = await fetch(`http://localhost:5241/questions/${Id}`);\r\n    const question = await response.json();\r\n    console.log(\"aaaaaaaaaa\");\r\n    console.log(question);\r\n    return mapQuestionFromServer(question);\r\n};\r\n\r\nexport const getAllQuestions = async (): Promise<QuestionData[]> => {\r\n    await wait(200);\r\n    return questions;\r\n};\r\n\r\nexport const searchQuestions = async (\r\n    critiria: string\r\n): Promise<QuestionData[]> => {\r\n    await wait(300);\r\n    return questions.filter(\r\n        (q) =>\r\n            q.title.toLowerCase().indexOf(critiria.toLowerCase()) >= 0 ||\r\n            q.content.toLowerCase().indexOf(critiria.toLowerCase()) >= 0\r\n    );\r\n};\r\n\r\nexport interface PostQuestionData {\r\n    title: string;\r\n    content: string;\r\n    created: Date;\r\n    userName: string;\r\n}\r\n\r\nexport const postQuestion = async (\r\n    question: PostQuestionData\r\n): Promise<QuestionData | undefined> => {\r\n    await wait(200);\r\n    const Id = Math.max(...questions.map((q) => q.Id)) + 1;\r\n    const newQuestion: QuestionData = {\r\n        ...question,\r\n        Id,\r\n        answers: [],\r\n    };\r\n    questions.push(newQuestion);\r\n    return newQuestion;\r\n};\r\n\r\nexport interface PostAnswerData {\r\n    Id: number;\r\n    content: string;\r\n    userName: string;\r\n    created: Date;\r\n}\r\n\r\nexport const postAnswer = async (\r\n    answer: PostAnswerData\r\n): Promise<AnswerData | undefined> => {\r\n    await wait(500);\r\n    const question = questions.filter((q) => q.Id === answer.Id)[0];\r\n    question.answers.push({\r\n        answerId: 99,\r\n        ...answer,\r\n    });\r\n    return {\r\n        answerId: 99,\r\n        ...answer,\r\n    };\r\n};\r\n\r\nexport interface QuestionDataFromServer {\r\n    Id: number;\r\n    title: string;\r\n    content: string;\r\n    userName: string;\r\n    created: string;\r\n    answers: Array<{\r\n        answerId: number;\r\n        content: string;\r\n        userName: string;\r\n        created: string;\r\n    }>;\r\n}\r\n\r\nexport const mapQuestionFromServer = (\r\n    question: QuestionDataFromServer\r\n): QuestionData => ({\r\n    ...question,\r\n    created: new Date(question.created),\r\n    answers: question.answers\r\n        ? question.answers.map((answer) => ({\r\n              ...answer,\r\n              created: new Date(answer.created),\r\n          }))\r\n        : [],\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}