{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\n// Initial state for the store\nconst InitialQuestionState = {\n  unanswered: [],\n  loading: false,\n  viewing: null,\n  searched: []\n};\n\n// Actions for getting the unasnwered questions\nexport const GETTINGUNANSWEREDQUESTIONS = \"GettingUnansweredQuestions\";\nexport const gettingUnansweredQuestionsAction = () => ({\n  type: GETTINGUNANSWEREDQUESTIONS\n});\nexport const GOTUNANSWEREDQUESTIONS = \"GotUnansweredQuestions\";\nexport const gotUnansweredQuestionsAction = questions => ({\n  type: GOTUNANSWEREDQUESTIONS,\n  questions: questions\n});\n\n// Actions for getting the viewed question\nexport const GETTINGQUESTION = \"GettingQuestion\";\nexport const gettingQuestionAction = () => ({\n  type: GETTINGQUESTION\n});\nexport const GOTQUESTION = \"GotQuestion\";\nexport const gotQuestionAction = question => ({\n  type: GOTQUESTION,\n  question: question\n});\n\n// Actions for getting the searched questions\nexport const GETTINGSEARCHEDQUESTIONS = \"GettingSearchedQuestions\";\nexport const gettingSearchedQuestionsAction = () => ({\n  type: GETTINGSEARCHEDQUESTIONS\n});\nexport const GOTSEARCHEDQUESTIONS = \"GotSearchedQuestions\";\nexport const gotSearchedQuestionsAction = questions => ({\n  type: GOTSEARCHEDQUESTIONS,\n  questions: questions\n});\nconst QuestionsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : InitialQuestionState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GETTINGUNANSWEREDQUESTIONS:\n      {\n        return {\n          ...state,\n          loading: true\n        };\n      }\n    case GOTUNANSWEREDQUESTIONS:\n      {\n        return {\n          ...state,\n          loading: false,\n          unanswered: action.questions\n        };\n      }\n    case GETTINGQUESTION:\n      {\n        return {\n          ...state,\n          loading: true,\n          viewing: null\n        };\n      }\n    case GOTQUESTION:\n      {\n        return {\n          ...state,\n          loading: false,\n          viewing: action.question\n        };\n      }\n    case GETTINGSEARCHEDQUESTIONS:\n      {\n        return {\n          ...state,\n          loading: true\n        };\n      }\n    case GOTSEARCHEDQUESTIONS:\n      {\n        return {\n          ...state,\n          loading: false,\n          searched: action.questions\n        };\n      }\n  }\n  return state;\n};\n_c = QuestionsReducer;\nexport const store = configureStore({\n  reducer: {\n    questions: QuestionsReducer\n  }\n});\n\n// export const useAppDispatch: () => AppDispatch = useDispatch;\n// export const useAppSelector: TypedUseSelectorHook<AppState> = useSelector;\nvar _c;\n$RefreshReg$(_c, \"QuestionsReducer\");","map":{"version":3,"names":["configureStore","InitialQuestionState","unanswered","loading","viewing","searched","GETTINGUNANSWEREDQUESTIONS","gettingUnansweredQuestionsAction","type","GOTUNANSWEREDQUESTIONS","gotUnansweredQuestionsAction","questions","GETTINGQUESTION","gettingQuestionAction","GOTQUESTION","gotQuestionAction","question","GETTINGSEARCHEDQUESTIONS","gettingSearchedQuestionsAction","GOTSEARCHEDQUESTIONS","gotSearchedQuestionsAction","QuestionsReducer","state","action","store","reducer"],"sources":["C:/Users/wisse/Asp.netReact_Training/test1/qAndA/frontend/src/Store.ts"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { QuestionData } from \"./questionsData\";\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\n\r\ninterface QuestionsState {\r\n    // An array of unanswered questions\r\n    readonly unanswered: QuestionData[];\r\n\r\n    // Thether a server request is being made\r\n    readonly loading: boolean;\r\n\r\n    // The question that the user is currently viewing\r\n    readonly viewing: QuestionData | null;\r\n\r\n    // An array of questions mathced with the search\r\n    readonly searched: QuestionData[];\r\n}\r\n\r\nexport interface AppState {\r\n    readonly questions: QuestionsState;\r\n}\r\n\r\n// Initial state for the store\r\nconst InitialQuestionState: QuestionsState = {\r\n    unanswered: [],\r\n    loading: false,\r\n    viewing: null,\r\n    searched: [],\r\n};\r\n\r\n// Actions for getting the unasnwered questions\r\nexport const GETTINGUNANSWEREDQUESTIONS = \"GettingUnansweredQuestions\";\r\nexport const gettingUnansweredQuestionsAction = () =>\r\n    ({\r\n        type: GETTINGUNANSWEREDQUESTIONS,\r\n    } as const);\r\n\r\nexport const GOTUNANSWEREDQUESTIONS = \"GotUnansweredQuestions\";\r\nexport const gotUnansweredQuestionsAction = (questions: QuestionData[]) =>\r\n    ({\r\n        type: GOTUNANSWEREDQUESTIONS,\r\n        questions: questions,\r\n    } as const);\r\n\r\n// Actions for getting the viewed question\r\nexport const GETTINGQUESTION = \"GettingQuestion\";\r\nexport const gettingQuestionAction = () =>\r\n    ({\r\n        type: GETTINGQUESTION,\r\n    } as const);\r\n\r\nexport const GOTQUESTION = \"GotQuestion\";\r\nexport const gotQuestionAction = (question: QuestionData | null) =>\r\n    ({\r\n        type: GOTQUESTION,\r\n        question: question,\r\n    } as const);\r\n\r\n// Actions for getting the searched questions\r\nexport const GETTINGSEARCHEDQUESTIONS = \"GettingSearchedQuestions\";\r\nexport const gettingSearchedQuestionsAction = () =>\r\n    ({\r\n        type: GETTINGSEARCHEDQUESTIONS,\r\n    } as const);\r\n\r\nexport const GOTSEARCHEDQUESTIONS = \"GotSearchedQuestions\";\r\nexport const gotSearchedQuestionsAction = (questions: QuestionData[]) =>\r\n    ({\r\n        type: GOTSEARCHEDQUESTIONS,\r\n        questions: questions,\r\n    } as const);\r\n\r\ntype QuestionsActions =\r\n    | ReturnType<typeof gettingUnansweredQuestionsAction>\r\n    | ReturnType<typeof gotUnansweredQuestionsAction>\r\n    | ReturnType<typeof gettingQuestionAction>\r\n    | ReturnType<typeof gotQuestionAction>\r\n    | ReturnType<typeof gettingSearchedQuestionsAction>\r\n    | ReturnType<typeof gotSearchedQuestionsAction>;\r\n\r\nconst QuestionsReducer = (\r\n    state = InitialQuestionState,\r\n    action: QuestionsActions\r\n) => {\r\n    switch (action.type) {\r\n        case GETTINGUNANSWEREDQUESTIONS: {\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        }\r\n        case GOTUNANSWEREDQUESTIONS: {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                unanswered: action.questions,\r\n            };\r\n        }\r\n        case GETTINGQUESTION: {\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                viewing: null,\r\n            };\r\n        }\r\n        case GOTQUESTION: {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                viewing: action.question,\r\n            };\r\n        }\r\n        case GETTINGSEARCHEDQUESTIONS: {\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        }\r\n        case GOTSEARCHEDQUESTIONS: {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                searched: action.questions,\r\n            };\r\n        }\r\n    }\r\n    return state;\r\n};\r\n\r\nexport const store = configureStore<AppState>({\r\n    reducer: {\r\n        questions: QuestionsReducer,\r\n    },\r\n});\r\n\r\n// export const useAppDispatch: () => AppDispatch = useDispatch;\r\n// export const useAppSelector: TypedUseSelectorHook<AppState> = useSelector;\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AAsBjD;AACA,MAAMC,oBAAoC,GAAG;EACzCC,UAAU,EAAE,EAAE;EACdC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE,IAAI;EACbC,QAAQ,EAAE;AACd,CAAC;;AAED;AACA,OAAO,MAAMC,0BAA0B,GAAG,4BAA4B;AACtE,OAAO,MAAMC,gCAAgC,GAAG,OAC3C;EACGC,IAAI,EAAEF;AACV,CAAC,CAAU;AAEf,OAAO,MAAMG,sBAAsB,GAAG,wBAAwB;AAC9D,OAAO,MAAMC,4BAA4B,GAAIC,SAAyB,KACjE;EACGH,IAAI,EAAEC,sBAAsB;EAC5BE,SAAS,EAAEA;AACf,CAAC,CAAU;;AAEf;AACA,OAAO,MAAMC,eAAe,GAAG,iBAAiB;AAChD,OAAO,MAAMC,qBAAqB,GAAG,OAChC;EACGL,IAAI,EAAEI;AACV,CAAC,CAAU;AAEf,OAAO,MAAME,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,iBAAiB,GAAIC,QAA6B,KAC1D;EACGR,IAAI,EAAEM,WAAW;EACjBE,QAAQ,EAAEA;AACd,CAAC,CAAU;;AAEf;AACA,OAAO,MAAMC,wBAAwB,GAAG,0BAA0B;AAClE,OAAO,MAAMC,8BAA8B,GAAG,OACzC;EACGV,IAAI,EAAES;AACV,CAAC,CAAU;AAEf,OAAO,MAAME,oBAAoB,GAAG,sBAAsB;AAC1D,OAAO,MAAMC,0BAA0B,GAAIT,SAAyB,KAC/D;EACGH,IAAI,EAAEW,oBAAoB;EAC1BR,SAAS,EAAEA;AACf,CAAC,CAAU;AAUf,MAAMU,gBAAgB,GAAG,YAGpB;EAAA,IAFDC,KAAK,uEAAGrB,oBAAoB;EAAA,IAC5BsB,MAAwB;EAExB,QAAQA,MAAM,CAACf,IAAI;IACf,KAAKF,0BAA0B;MAAE;QAC7B,OAAO;UACH,GAAGgB,KAAK;UACRnB,OAAO,EAAE;QACb,CAAC;MACL;IACA,KAAKM,sBAAsB;MAAE;QACzB,OAAO;UACH,GAAGa,KAAK;UACRnB,OAAO,EAAE,KAAK;UACdD,UAAU,EAAEqB,MAAM,CAACZ;QACvB,CAAC;MACL;IACA,KAAKC,eAAe;MAAE;QAClB,OAAO;UACH,GAAGU,KAAK;UACRnB,OAAO,EAAE,IAAI;UACbC,OAAO,EAAE;QACb,CAAC;MACL;IACA,KAAKU,WAAW;MAAE;QACd,OAAO;UACH,GAAGQ,KAAK;UACRnB,OAAO,EAAE,KAAK;UACdC,OAAO,EAAEmB,MAAM,CAACP;QACpB,CAAC;MACL;IACA,KAAKC,wBAAwB;MAAE;QAC3B,OAAO;UACH,GAAGK,KAAK;UACRnB,OAAO,EAAE;QACb,CAAC;MACL;IACA,KAAKgB,oBAAoB;MAAE;QACvB,OAAO;UACH,GAAGG,KAAK;UACRnB,OAAO,EAAE,KAAK;UACdE,QAAQ,EAAEkB,MAAM,CAACZ;QACrB,CAAC;MACL;EAAC;EAEL,OAAOW,KAAK;AAChB,CAAC;AAAC,KA/CID,gBAAgB;AAiDtB,OAAO,MAAMG,KAAK,GAAGxB,cAAc,CAAW;EAC1CyB,OAAO,EAAE;IACLd,SAAS,EAAEU;EACf;AACJ,CAAC,CAAC;;AAEF;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}